{"remainingRequest":"/Users/diana.carhuamanta/Desktop/proyecto_paolo/ml-vuetify/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/diana.carhuamanta/Desktop/proyecto_paolo/ml-vuetify/src/components/MainSection.vue?vue&type=template&id=7174c6ec&scoped=true&","dependencies":[{"path":"/Users/diana.carhuamanta/Desktop/proyecto_paolo/ml-vuetify/src/components/MainSection.vue","mtime":1657919680960},{"path":"/Users/diana.carhuamanta/Desktop/proyecto_paolo/ml-vuetify/node_modules/cache-loader/dist/cjs.js","mtime":1657549408945},{"path":"/Users/diana.carhuamanta/Desktop/proyecto_paolo/ml-vuetify/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1657549403843},{"path":"/Users/diana.carhuamanta/Desktop/proyecto_paolo/ml-vuetify/node_modules/cache-loader/dist/cjs.js","mtime":1657549408945},{"path":"/Users/diana.carhuamanta/Desktop/proyecto_paolo/ml-vuetify/node_modules/vue-loader/lib/index.js","mtime":1657549403257}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}